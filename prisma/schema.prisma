// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

// model User{
//   id String @id @default(uuid())
//   firstName String
//   lastName String
//   email String @unique
//   password String
//   createdAt DateTime @default(now())
//   blogs    Blog[]   @relation("UserBlogs")
// }

// model Blog {
//   id          String      @id @default(uuid())
//   blogName    String
//   hook        String
//   blogCover   String 
//   blogCoverPublicId String?
//   desc        String  
//   status      Boolean     @default(true)
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
//   userId      String
//   user        User        @relation("UserBlogs", fields: [userId], references: [id])
//   blogTags    BlogTag[] 

//   @@unique([id, userId])
// }

// model Tag {
//   id       String    @id @default(uuid())
//   name     String    @unique
//   blogTags BlogTag[]
// }

// model BlogTag {
//   id      String @id @default(uuid())
//   blogId  String
//   tagId   String
//   blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
//   tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

//   @@unique([blogId, tagId])
// }


// model Subscriber {
//   id       String    @id @default(uuid())
//   email     String    @unique
//   createdAt   DateTime    @default(now())
// }


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String    @unique
  password    String
  createdAt   DateTime  @default(now())
  blogs       Blog[]    @relation("UserBlogs")
}

model Blog {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  blogName         String
  hook             String
  blogCover        String 
  blogCoverPublicId String?
  desc             String  
  status           Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  userId           String     @db.ObjectId // Add @db.ObjectId here
  user             User       @relation("UserBlogs", fields: [userId], references: [id])
  blogTags         BlogTag[] 

  @@unique([id, userId])
}

model Tag {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  blogTags BlogTag[]
}

model BlogTag {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  blogId  String  @db.ObjectId // Add @db.ObjectId here
  tagId   String  @db.ObjectId // Add @db.ObjectId here
  blog    Blog    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([blogId, tagId])
}

model Subscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}
